Meshtastic Support App - changelog
Project alias: noflak
Version format: x.x.xxxx (major.minor.specific)

v0.1.0001 - 2025-09-16 - noflak
- Initial migration: replaced FastAPI `@app.on_event('startup')` with `lifespan` context manager.
- Added CLI helpers and `run_cli_command()` fallback to `python -m meshtastic` when `meshtastic` binary not on PATH.
- Implemented BLE and COM scanning helpers (`scan_ble_devices`, `scan_com_ports`) with retry/backoff.
- Added BLE address variant generation to improve device targeting.
- Implemented `find_nodes()`, `summarize_meshtastic_nodes()`, `add_node_manual()`, `remove_node()`.
- Implemented `auto_connect_loop()` (dry-run) and `interactive_connect()` flows.
- Hardened candidate validation with retries, BLE variants, and JSON parsing (`validate_candidate()`).
- Added DB `commit_history` support, snapshot-before-commit, and `undo_last_commit()` CLI.
- Added unit tests for `validate_candidate()`.

v0.2.000 - 2025-09-16 - iteration
- Added optional Redis cache adapter for `/api/nodes/positions` with detection for `redis.asyncio` (async) and sync `redis` fallback.
- Added unit tests to validate Redis behavior and fallback to in-memory cache on failures.
- Introduced `tools/check_device.py` — a non-destructive helper that runs `meshtastic --info` and prints compact or JSON summaries. Supports `--port`, `--ble`, `--json`, `--timeout`, `--retries`, and `--try-ble`.
- Polished map UI visuals: legend additions, marker battery/age color mapping, and minor JS improvements.

Validation & live test:
- Local tests passing: 8 passed (unit + integration).
- Ran a live device check: `tools/check_device.py --port COM4` produced compact output; `--json` emitted structured JSON. BLE scan also returned results from the host adapter.

Next steps:
- Add explicit async Redis lifecycle management in FastAPI lifespan for production multi-worker deployments.
- Add Chart.js graphs to `node_info.html` and further UI polish.

Notes:
- Rollback mechanism stores snapshots in DB `commit_history` as JSON. Consider stronger transactional approach if concurrent writes expected.
- Future: Web UI integration (discover, validate, commit, rollback) planned.

# v0.2.0000 — 2025-09-16(noflak)

